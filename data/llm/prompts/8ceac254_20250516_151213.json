[
  {
    "role": "system",
    "content": "你是一位顶级的SQL数据血缘分析专家。\n你的任务是基于用户提供的SQL语句、相关的数据库对象元数据（表结构、视图定义等），以及SQL的唯一标识哈希（如果提供），精确地分析出字段级别的数据血缘关系。请注意判断提供的SQL是完整的还是片段。如果是片段，请基于提供的元数据上下文进行分析，并在分析中注意说明这是基于片段的分析结果。\n你需要识别数据是如何从源对象的源字段，经过可能的转换逻辑，最终写入到目标对象的特定目标字段。\n\n请严格按照用户要求的JSON格式输出分析结果，不要包含任何解释性文字或Markdown标记，只输出纯JSON对象。\nJSON中应包含以下关键信息：\n- 'sql_pattern_hash': 提供的SQL模式的唯一哈希值（如果提供）。\n- 'source_database_name': SQL所属的源数据库名称。\n- 'target_object': 如果SQL有明确的写入目标（如INSERT的目标表，UPDATE的表，CREATE VIEW的视图名），请提供其 'schema', 'name', 'type'。若无明确写入目标（如纯SELECT），此字段可为null。\n- 'column_level_lineage': 一个列表，每个元素描述一个目标字段的血缘：\n    - 'target_column': 目标字段名。\n    - 'target_object_name': (可选，如果target_object非null) 目标对象名，用于消除歧义。\n    - 'target_object_schema': (可选) 目标对象schema。\n    - 'sources': 一个列表，包含所有对此目标字段有贡献的源信息。每个源信息包含：\n        - 'source_object': {'schema': '...', 'name': '...', 'type': 'TABLE'/'VIEW'}\n        - 'source_column': 源字段名，如果是字面量或表达式可以为null。\n        - 'transformation_logic': 描述从源到目标所经历的完整转换逻辑或计算表达式，应尽可能包含从最内层字段到最终目标字段的完整表达式，包括聚合函数。例如，应使用 'SUM(COALESCE(ss_quantity, 0))' 而非简化的 'SUM(...)'。必须包含具体的字段名，不要使用省略号。如果表达式过长，可以分段描述或只描述关键部分，但字段名不应省略。对于直接映射关系，应精确描述字段的别名关系，例如 'r.r_reason_desc AS primary_return_reason_desc'或'customer.c_name 直接映射到 customer_name'。\n    - 'derivation_type': 对目标字段值产生方式的分类（例如 'DIRECT_MAPPING', 'AGGREGATION', 'LITERAL_ASSIGNMENT', 'CONDITIONAL_LOGIC', 'FUNCTION_CALL', 'UNION_MERGE'）。\n- 'referenced_objects': 一个列表，包含SQL中所有被引用（读取或写入）的数据库对象（表、视图）及其 'schema', 'name', 'type' 和 'access_mode' ('READ', 'WRITE', 'READ_WRITE')。\n- 'unresolved_references': (可选) 一个列表，记录在提供的元数据中找不到对应定义的表或视图名。\n- 'parsing_confidence': (可选) 你对本次解析准确度的信心评分 (0.0 - 1.0)。\n- 'errors_or_warnings': (可选) 一个列表，记录解析过程中遇到的任何问题或警告。\n- 'is_sql_fragment': (可选) 布尔值，标识分析的SQL是否为片段而非完整语句。如果是true，请在'fragment_analysis_notes'字段中提供对片段分析的说明。\n- 'fragment_analysis_notes': (可选) 当分析的是SQL片段时，提供对片段分析的补充说明，包括可能的假设和限制。\n\n特别注意事项：\n1. 处理UNION/UNION ALL操作：\n   - 当一个目标列的数据来自多个UNION分支时，应使用'UNION_MERGE'作为derivation_type。\n   - 在sources列表中，应包含来自每个UNION分支的源信息。\n   - 对于每个UNION分支中的字面量赋值（如'Store', 'Catalog', 'Web'），应在transformation_logic中明确标注这是\"UNION分支中的字面量赋值\"。\n   - 如果UNION分支中的列是字面量，source_column可以为null，但必须在transformation_logic中清晰描述。\n   - 在描述UNION操作的transformation_logic时，必须指明每个分支中的具体字段名，不要使用省略号。例如：\"UNION合并：第一分支中的store_sales.ss_quantity与第二分支中的web_sales.ws_quantity\"\n\n2. 处理字面量和表达式：\n   - 对于字面量赋值（如'2023', 1000, 'Active'等），应使用'LITERAL_ASSIGNMENT'作为derivation_type。\n   - 对于字面量，source_column可以为null，但必须在transformation_logic中准确描述字面量的值。\n   - 对于复杂表达式（如CASE WHEN, COALESCE等），应详细描述表达式的逻辑，并使用适当的derivation_type。在描述表达式时，必须包含所有相关字段的完整名称，例如：\"CASE WHEN store.store_type = 'SUPERMARKET' THEN store.store_name ELSE 'OTHER' END\"。\n   - 对于聚合函数（如SUM, AVG, COUNT等），应在transformation_logic中包含完整的聚合表达式，如'SUM(COALESCE(ss_quantity, 0))'。即使表达式复杂，也应包含所有字段名，而不是使用省略号。\n\n3. transformation_logic与derivation_type的组合使用：\n   - transformation_logic应包含完整的表达式，而derivation_type提供表达式类型的分类。\n   - 两者组合使用可以提供更完整的血缘信息，例如：transformation_logic为'SUM(COALESCE(ss_quantity, 0))'，derivation_type为'AGGREGATION'。\n   - 当一个目标字段的数据来自多个源时（如UNION或复杂表达式），每个源的transformation_logic应尽可能详细。\n   - 无论表达式多么复杂，transformation_logic中都必须包含所有相关字段的完整名称，不要使用省略号。如果表达式确实过长，可以将其分解为多个源记录，每个记录描述表达式的一部分，但不要省略字段名。\n\n4. 处理子查询：\n   - 对于包含子查询的SQL，应递归分析子查询的血缘关系。\n   - 如果子查询结果作为一个整体被引用，应将子查询视为一个虚拟表，并在transformation_logic中说明。"
  },
  {
    "role": "user",
    "content": "请分析以下SQL语句，并提取字段级血缘关系。\n\nSQL模式的唯一哈希: 8ceac2546d35e6f8a2bccba875a63e42421836e92171e76de9ee33b24f238fb8\n\n原始SQL:\n```sql\nWITH monthly_sales_base AS (\n    SELECT 'Store' as channel, ss_sold_date_sk as sold_date_sk, COALESCE(ss_quantity, 0) as quantity FROM store_sales\n    UNION ALL\n    SELECT 'Catalog' as channel, cs_sold_date_sk as sold_date_sk, COALESCE(cs_quantity, 0) as quantity FROM catalog_sales\n    UNION ALL\n    SELECT 'Web' as channel, ws_sold_date_sk as sold_date_sk, COALESCE(ws_quantity, 0) as quantity FROM web_sales\n),\nmonthly_returns_base AS (\n    SELECT 'Store' as channel, sr_returned_date_sk as returned_date_sk, sr_reason_sk as reason_sk, COALESCE(sr_return_quantity, 0) as quantity FROM store_returns\n    UNION ALL\n    SELECT 'Catalog' as channel, cr_returned_date_sk as returned_date_sk, cr_reason_sk as reason_sk, COALESCE(cr_return_quantity, 0) as quantity FROM catalog_returns\n    UNION ALL\n    SELECT 'Web' as channel, wr_returned_date_sk as returned_date_sk, wr_reason_sk as reason_sk, COALESCE(wr_return_quantity, 0) as quantity FROM web_returns\n),\nmonthly_channel_sales AS (\n    SELECT\n        TO_CHAR(d.d_date, 'YYYY-MM') AS sales_ym,\n        msb.channel,\n        SUM(msb.quantity) AS total_sold_quantity\n    FROM monthly_sales_base msb\n    JOIN date_dim d ON msb.sold_date_sk = d.d_date_sk\n    WHERE d.d_date IS NOT NULL\n    GROUP BY TO_CHAR(d.d_date, 'YYYY-MM'), msb.channel\n),\nmonthly_channel_returns_with_reason AS (\n    SELECT\n        TO_CHAR(d.d_date, 'YYYY-MM') AS return_ym,\n        mrb.channel,\n        mrb.reason_sk,\n        r.r_reason_desc,\n        SUM(mrb.quantity) AS returned_quantity_for_reason\n    FROM monthly_returns_base mrb\n    JOIN date_dim d ON mrb.returned_date_sk = d.d_date_sk\n    LEFT JOIN reason r ON mrb.reason_sk = r.r_reason_sk\n    WHERE d.d_date IS NOT NULL\n    GROUP BY TO_CHAR(d.d_date, 'YYYY-MM'), mrb.channel, mrb.reason_sk, r.r_reason_desc\n),\nranked_monthly_channel_returns AS (\n    SELECT\n        return_ym,\n        channel,\n        reason_sk,\n        r_reason_desc,\n        returned_quantity_for_reason,\n        SUM(returned_quantity_for_reason) OVER (PARTITION BY return_ym, channel) as total_returned_in_month_channel,\n        ROW_NUMBER() OVER (PARTITION BY return_ym, channel ORDER BY returned_quantity_for_reason DESC) as rn\n    FROM monthly_channel_returns_with_reason\n)\nINSERT INTO monthly_channel_returns_analysis_report (sales_year_month, channel, total_sold_quantity, total_returned_quantity, return_rate_by_quantity, primary_return_reason_desc, primary_reason_returned_quantity)\nSELECT\n    mcs.sales_ym AS sales_year_month,\n    mcs.channel,\n    COALESCE(mcs.total_sold_quantity, 0) AS total_sold_quantity,\n    COALESCE(rmcr.total_returned_in_month_channel, 0) AS total_returned_quantity,\n    CASE\n        WHEN COALESCE(mcs.total_sold_quantity, 0) > 0 THEN ROUND(CAST(COALESCE(rmcr.total_returned_in_month_channel, 0) AS NUMERIC) * 100.0 / mcs.total_sold_quantity, 4)\n        ELSE 0\n    END AS return_rate_by_quantity,\n    rmcr.r_reason_desc AS primary_return_reason_desc,\n    COALESCE(rmcr.returned_quantity_for_reason, 0) AS primary_reason_returned_quantity\nFROM\n    monthly_channel_sales mcs\nLEFT JOIN -- Join sales with returns data for the same month and channel\n    (SELECT * FROM ranked_monthly_channel_returns WHERE rn = 1) rmcr ON mcs.sales_ym = rmcr.return_ym AND mcs.channel = rmcr.channel\nORDER BY\n    mcs.sales_ym, mcs.channel;\n```\n\n相关的数据库对象元数据:\n源数据库名称: tpcds\n\nTABLE 'public.monthly_channel_returns_analysis_report':\n  行数: 183\n  列信息:\n    - sales_year_month (character varying(7) NULL )\n    - channel (character varying(20) NULL )\n    - total_sold_quantity (bigint NULL )\n    - total_returned_quantity (bigint NULL )\n    - return_rate_by_quantity (numeric(7,4) NULL )\n    - primary_return_reason_desc (character(100) NULL )\n    - primary_reason_returned_quantity (bigint NULL )\n\nTABLE 'public.date_dim':\n  描述: Dimension table for dates.\n  行数: 73049\n  列信息:\n    - d_date_sk (integer NOT NULL PRIMARY KEY) -- Surrogate key for date.\n    - d_date_id (character(16) NOT NULL ) -- Business key for date (e.g., YYYY-MM-DD).\n    - d_date (date NOT NULL ) -- Actual date value.\n    - d_month_seq (integer NULL ) -- Sequential month number since a base date.\n    - d_week_seq (integer NULL ) -- Sequential week number since a base date.\n    - d_quarter_seq (integer NULL ) -- Sequential quarter number since a base date.\n    - d_year (integer NULL ) -- Year (e.g., 2023).\n    - d_dow (integer NULL ) -- Day of the week (0=Sunday, 1=Monday, ..., 6=Saturday).\n    - d_moy (integer NULL ) -- Month of the year (1-12).\n    - d_dom (integer NULL ) -- Day of the month (1-31).\n    - d_qoy (integer NULL ) -- Quarter of the year (1-4).\n    - d_fy_year (integer NULL ) -- Fiscal year.\n    - d_fy_quarter_seq (integer NULL ) -- Sequential fiscal quarter number.\n    - d_fy_week_seq (integer NULL ) -- Sequential fiscal week number.\n    - d_day_name (character(9) NULL ) -- Name of the day (e.g., Monday).\n    - d_quarter_name (character(6) NULL ) -- Name of the quarter (e.g., Q1YYYY).\n    - d_holiday (character(1) NULL ) -- Flag indicating if the date is a holiday (Y/N).\n    - d_weekend (character(1) NULL ) -- Flag indicating if the date is a weekend (Y/N).\n    - d_following_holiday (character(1) NULL ) -- Flag indicating if the date is following a holiday (Y/N).\n    - d_first_dom (integer NULL ) -- First day of the month surrogate key.\n    - d_last_dom (integer NULL ) -- Last day of the month surrogate key.\n    - d_same_day_ly (integer NULL ) -- Surrogate key for the same day last year.\n    - d_same_day_lq (integer NULL ) -- Surrogate key for the same day last quarter.\n    - d_current_day (character(1) NULL ) -- Flag if this date is the current day (Y/N).\n    - d_current_week (character(1) NULL ) -- Flag if this date is in the current week (Y/N).\n    - d_current_month (character(1) NULL ) -- Flag if this date is in the current month (Y/N).\n    - d_current_quarter (character(1) NULL ) -- Flag if this date is in the current quarter (Y/N).\n    - d_current_year (character(1) NULL ) -- Flag if this date is in the current year (Y/N).\n\nTABLE 'public.reason':\n  描述: Dimension table for return reasons.\n  行数: 75\n  列信息:\n    - r_reason_sk (integer NOT NULL PRIMARY KEY) -- Surrogate key for reason.\n    - r_reason_id (character(16) NOT NULL ) -- Business key for reason.\n    - r_reason_desc (character(100) NULL ) -- Description of the reason for return.\n\nTABLE 'public.web_sales':\n  描述: Fact table for web sales.\n  行数: 719384\n  列信息:\n    - ws_sold_date_sk (integer NULL ) -- Surrogate key for the date of sale.\n    - ws_sold_time_sk (integer NULL ) -- Surrogate key for the time of sale.\n    - ws_ship_date_sk (integer NULL ) -- Surrogate key for the date item was shipped.\n    - ws_item_sk (integer NOT NULL PRIMARY KEY) -- Foreign key to the item table.\n    - ws_bill_customer_sk (integer NULL ) -- FK to customer for billing.\n    - ws_bill_cdemo_sk (integer NULL ) -- FK to customer_demographics for billing customer.\n    - ws_bill_hdemo_sk (integer NULL ) -- FK to household_demographics for billing customer.\n    - ws_bill_addr_sk (integer NULL ) -- FK to customer_address for billing address.\n    - ws_ship_customer_sk (integer NULL ) -- FK to customer for shipping (can be different from billing).\n    - ws_ship_cdemo_sk (integer NULL ) -- FK to customer_demographics for shipping customer.\n    - ws_ship_hdemo_sk (integer NULL ) -- FK to household_demographics for shipping customer.\n    - ws_ship_addr_sk (integer NULL ) -- FK to customer_address for shipping address.\n    - ws_web_page_sk (integer NULL ) -- FK to web_page from which the sale originated.\n    - ws_web_site_sk (integer NULL ) -- FK to web_site from which the sale originated.\n    - ws_ship_mode_sk (integer NULL ) -- FK to ship_mode used for this sale.\n    - ws_warehouse_sk (integer NULL ) -- FK to warehouse from which item was shipped.\n    - ws_promo_sk (integer NULL ) -- FK to promotion applied to this sale.\n    - ws_order_number (integer NOT NULL PRIMARY KEY) -- Web sales order number.\n    - ws_quantity (integer NULL ) -- Quantity of the item sold.\n    - ws_wholesale_cost (numeric(7,2) NULL ) -- Wholesale cost of the item(s) sold.\n    - ws_list_price (numeric(7,2) NULL ) -- List price of the item(s) sold.\n    - ws_sales_price (numeric(7,2) NULL ) -- Actual sales price after discounts (excluding tax, shipping).\n    - ws_ext_discount_amt (numeric(7,2) NULL ) -- Extended discount amount for this line item.\n    - ws_ext_sales_price (numeric(7,2) NULL ) -- Extended sales price (quantity * sales_price).\n    - ws_ext_wholesale_cost (numeric(7,2) NULL ) -- Extended wholesale cost (quantity * wholesale_cost).\n    - ws_ext_list_price (numeric(7,2) NULL ) -- Extended list price (quantity * list_price).\n    - ws_ext_tax (numeric(7,2) NULL ) -- Tax amount for this line item.\n    - ws_coupon_amt (numeric(7,2) NULL ) -- Coupon amount applied to this line item.\n    - ws_ext_ship_cost (numeric(7,2) NULL ) -- Shipping cost for this line item.\n    - ws_net_paid (numeric(7,2) NULL ) -- Net amount paid by customer (excluding tax and shipping).\n    - ws_net_paid_inc_tax (numeric(7,2) NULL ) -- Net amount paid by customer (including tax, excluding shipping).\n    - ws_net_paid_inc_ship (numeric(7,2) NULL ) -- Net amount paid by customer (including shipping, excluding tax).\n    - ws_net_paid_inc_ship_tax (numeric(7,2) NULL ) -- Net amount paid by customer (including tax and shipping).\n    - ws_net_profit (numeric(7,2) NULL ) -- Net profit for this line item.\n\nTABLE 'public.web_returns':\n  描述: Fact table for web returns.\n  行数: 71763\n  列信息:\n    - wr_returned_date_sk (integer NULL ) -- Surrogate key for the date of return.\n    - wr_returned_time_sk (integer NULL ) -- Surrogate key for the time of return.\n    - wr_item_sk (integer NOT NULL PRIMARY KEY) -- Foreign key to item table for the returned item.\n    - wr_refunded_customer_sk (integer NULL ) -- FK to customer who received refund.\n    - wr_refunded_cdemo_sk (integer NULL ) -- FK to customer_demographics for refunded customer.\n    - wr_refunded_hdemo_sk (integer NULL ) -- FK to household_demographics for refunded customer.\n    - wr_refunded_addr_sk (integer NULL ) -- FK to customer_address for refunded customer.\n    - wr_returning_customer_sk (integer NULL ) -- FK to customer who initiated return.\n    - wr_returning_cdemo_sk (integer NULL ) -- FK to customer_demographics for returning customer.\n    - wr_returning_hdemo_sk (integer NULL ) -- FK to household_demographics for returning customer.\n    - wr_returning_addr_sk (integer NULL ) -- FK to customer_address for returning customer.\n    - wr_web_page_sk (integer NULL ) -- FK to web_page from which the item was originally ordered/returned.\n    - wr_reason_sk (integer NULL ) -- FK to reason for the return.\n    - wr_order_number (integer NOT NULL PRIMARY KEY) -- Original web sales order number.\n    - wr_return_quantity (integer NULL ) -- Quantity of the item returned.\n    - wr_return_amt (numeric(7,2) NULL ) -- Return amount before tax.\n    - wr_return_tax (numeric(7,2) NULL ) -- Tax amount on the return.\n    - wr_return_amt_inc_tax (numeric(7,2) NULL ) -- Return amount including tax.\n    - wr_fee (numeric(7,2) NULL ) -- Restocking or return fee.\n    - wr_return_ship_cost (numeric(7,2) NULL ) -- Shipping cost for returning the item.\n    - wr_refunded_cash (numeric(7,2) NULL ) -- Amount refunded as cash.\n    - wr_reversed_charge (numeric(7,2) NULL ) -- Amount refunded via reversing a charge.\n    - wr_account_credit (numeric(7,2) NULL ) -- Amount refunded as account credit.\n    - wr_net_loss (numeric(7,2) NULL ) -- Net loss incurred from this web return.\n\nTABLE 'public.store_sales':\n  描述: Fact table for store sales.\n  行数: 2880293\n  列信息:\n    - ss_sold_date_sk (integer NULL ) -- Surrogate key for the date of sale.\n    - ss_sold_time_sk (integer NULL ) -- Surrogate key for the time of sale.\n    - ss_item_sk (integer NOT NULL PRIMARY KEY) -- Foreign key to the item table.\n    - ss_customer_sk (integer NULL ) -- FK to customer who made the purchase.\n    - ss_cdemo_sk (integer NULL ) -- FK to customer_demographics for purchasing customer.\n    - ss_hdemo_sk (integer NULL ) -- FK to household_demographics for purchasing customer.\n    - ss_addr_sk (integer NULL ) -- FK to customer_address for purchasing customer (likely store address for anonymous sales).\n    - ss_store_sk (integer NULL ) -- FK to store where sale occurred.\n    - ss_promo_sk (integer NULL ) -- FK to promotion applied.\n    - ss_ticket_number (integer NOT NULL PRIMARY KEY) -- Store sales ticket number (unique within a store/day or globally).\n    - ss_quantity (integer NULL ) -- Quantity of the item sold.\n    - ss_wholesale_cost (numeric(7,2) NULL ) -- Wholesale cost.\n    - ss_list_price (numeric(7,2) NULL ) -- List price.\n    - ss_sales_price (numeric(7,2) NULL ) -- Actual sales price.\n    - ss_ext_discount_amt (numeric(7,2) NULL ) -- Extended discount amount.\n    - ss_ext_sales_price (numeric(7,2) NULL ) -- Extended sales price.\n    - ss_ext_wholesale_cost (numeric(7,2) NULL ) -- Extended wholesale cost.\n    - ss_ext_list_price (numeric(7,2) NULL ) -- Extended list price.\n    - ss_ext_tax (numeric(7,2) NULL ) -- Tax amount.\n    - ss_coupon_amt (numeric(7,2) NULL ) -- Coupon amount.\n    - ss_net_paid (numeric(7,2) NULL ) -- Net paid (excluding tax).\n    - ss_net_paid_inc_tax (numeric(7,2) NULL ) -- Net paid (including tax).\n    - ss_net_profit (numeric(7,2) NULL ) -- Net profit.\n\nTABLE 'public.catalog_sales':\n  描述: Fact table for catalog sales.\n  行数: 1441565\n  列信息:\n    - cs_sold_date_sk (integer NULL ) -- Surrogate key for the date of sale.\n    - cs_sold_time_sk (integer NULL ) -- Surrogate key for the time of sale.\n    - cs_ship_date_sk (integer NULL ) -- Surrogate key for the date item was shipped.\n    - cs_bill_customer_sk (integer NULL ) -- FK to customer for billing.\n    - cs_bill_cdemo_sk (integer NULL ) -- FK to customer_demographics for billing customer.\n    - cs_bill_hdemo_sk (integer NULL ) -- FK to household_demographics for billing customer.\n    - cs_bill_addr_sk (integer NULL ) -- FK to customer_address for billing address.\n    - cs_ship_customer_sk (integer NULL ) -- FK to customer for shipping.\n    - cs_ship_cdemo_sk (integer NULL ) -- FK to customer_demographics for shipping customer.\n    - cs_ship_hdemo_sk (integer NULL ) -- FK to household_demographics for shipping customer.\n    - cs_ship_addr_sk (integer NULL ) -- FK to customer_address for shipping address.\n    - cs_call_center_sk (integer NULL ) -- FK to call_center if sale was processed via call center.\n    - cs_catalog_page_sk (integer NULL ) -- FK to catalog_page from which sale originated.\n    - cs_ship_mode_sk (integer NULL ) -- FK to ship_mode used.\n    - cs_warehouse_sk (integer NULL ) -- FK to warehouse from which item was shipped.\n    - cs_item_sk (integer NOT NULL PRIMARY KEY) -- Foreign key to the item table.\n    - cs_promo_sk (integer NULL ) -- FK to promotion applied.\n    - cs_order_number (integer NOT NULL PRIMARY KEY) -- Catalog sales order number.\n    - cs_quantity (integer NULL ) -- Quantity of the item sold.\n    - cs_wholesale_cost (numeric(7,2) NULL ) -- Wholesale cost.\n    - cs_list_price (numeric(7,2) NULL ) -- List price.\n    - cs_sales_price (numeric(7,2) NULL ) -- Actual sales price.\n    - cs_ext_discount_amt (numeric(7,2) NULL ) -- Extended discount amount.\n    - cs_ext_sales_price (numeric(7,2) NULL ) -- Extended sales price.\n    - cs_ext_wholesale_cost (numeric(7,2) NULL ) -- Extended wholesale cost.\n    - cs_ext_list_price (numeric(7,2) NULL ) -- Extended list price.\n    - cs_ext_tax (numeric(7,2) NULL ) -- Tax amount.\n    - cs_coupon_amt (numeric(7,2) NULL ) -- Coupon amount.\n    - cs_ext_ship_cost (numeric(7,2) NULL ) -- Shipping cost.\n    - cs_net_paid (numeric(7,2) NULL ) -- Net paid (excluding tax, shipping).\n    - cs_net_paid_inc_tax (numeric(7,2) NULL ) -- Net paid (including tax, excluding shipping).\n    - cs_net_paid_inc_ship (numeric(7,2) NULL ) -- Net paid (including shipping, excluding tax).\n    - cs_net_paid_inc_ship_tax (numeric(7,2) NULL ) -- Net paid (including tax and shipping).\n    - cs_net_profit (numeric(7,2) NULL ) -- Net profit.\n\nTABLE 'public.store_returns':\n  描述: Fact table for store returns.\n  行数: 287514\n  列信息:\n    - sr_returned_date_sk (integer NULL ) -- Surrogate key for the date of return.\n    - sr_return_time_sk (integer NULL ) -- Surrogate key for the time of return.\n    - sr_item_sk (integer NOT NULL PRIMARY KEY) -- Foreign key to the item table for the returned item.\n    - sr_customer_sk (integer NULL ) -- Foreign key to the customer table for the returning customer.\n    - sr_cdemo_sk (integer NULL ) -- Foreign key to customer_demographics at the time of return.\n    - sr_hdemo_sk (integer NULL ) -- Foreign key to household_demographics at the time of return.\n    - sr_addr_sk (integer NULL ) -- Foreign key to customer_address at the time of return.\n    - sr_store_sk (integer NULL ) -- Foreign key to the store table where the item was returned.\n    - sr_reason_sk (integer NULL ) -- Foreign key to the reason table for the return reason.\n    - sr_ticket_number (integer NOT NULL PRIMARY KEY) -- Ticket number of the original sales transaction.\n    - sr_return_quantity (integer NULL ) -- Quantity of the item returned.\n    - sr_return_amt (numeric(7,2) NULL ) -- Return amount before tax.\n    - sr_return_tax (numeric(7,2) NULL ) -- Tax amount on the return.\n    - sr_return_amt_inc_tax (numeric(7,2) NULL ) -- Return amount including tax.\n    - sr_fee (numeric(7,2) NULL ) -- Restocking or return fee.\n    - sr_return_ship_cost (numeric(7,2) NULL ) -- Shipping cost associated with the return (if any).\n    - sr_refunded_cash (numeric(7,2) NULL ) -- Amount refunded as cash.\n    - sr_reversed_charge (numeric(7,2) NULL ) -- Amount refunded via reversing a charge.\n    - sr_store_credit (numeric(7,2) NULL ) -- Amount refunded as store credit.\n    - sr_net_loss (numeric(7,2) NULL ) -- Net loss incurred from the return.\n\nTABLE 'public.catalog_returns':\n  描述: Fact table for catalog returns.\n  行数: 144067\n  列信息:\n    - cr_returned_date_sk (integer NULL ) -- Surrogate key for the date of return.\n    - cr_returned_time_sk (integer NULL ) -- Surrogate key for the time of return.\n    - cr_item_sk (integer NOT NULL PRIMARY KEY) -- Foreign key to item table for the returned item.\n    - cr_refunded_customer_sk (integer NULL ) -- FK to customer who received refund (may be different from returning).\n    - cr_refunded_cdemo_sk (integer NULL ) -- FK to customer_demographics for refunded customer.\n    - cr_refunded_hdemo_sk (integer NULL ) -- FK to household_demographics for refunded customer.\n    - cr_refunded_addr_sk (integer NULL ) -- FK to customer_address for refunded customer.\n    - cr_returning_customer_sk (integer NULL ) -- FK to customer who initiated return.\n    - cr_returning_cdemo_sk (integer NULL ) -- FK to customer_demographics for returning customer.\n    - cr_returning_hdemo_sk (integer NULL ) -- FK to household_demographics for returning customer.\n    - cr_returning_addr_sk (integer NULL ) -- FK to customer_address for returning customer.\n    - cr_call_center_sk (integer NULL ) -- FK to call_center if return was processed via call center.\n    - cr_catalog_page_sk (integer NULL ) -- FK to catalog_page from which the item was originally ordered.\n    - cr_ship_mode_sk (integer NULL ) -- FK to ship_mode used for returning item.\n    - cr_warehouse_sk (integer NULL ) -- FK to warehouse where item was returned.\n    - cr_reason_sk (integer NULL ) -- FK to reason for the return.\n    - cr_order_number (integer NOT NULL PRIMARY KEY) -- Original catalog sales order number.\n    - cr_return_quantity (integer NULL ) -- Quantity of the item returned.\n    - cr_return_amount (numeric(7,2) NULL ) -- Return amount before tax.\n    - cr_return_tax (numeric(7,2) NULL ) -- Tax amount on the return.\n    - cr_return_amt_inc_tax (numeric(7,2) NULL ) -- Return amount including tax.\n    - cr_fee (numeric(7,2) NULL ) -- Restocking or return fee.\n    - cr_return_ship_cost (numeric(7,2) NULL ) -- Shipping cost for returning the item.\n    - cr_refunded_cash (numeric(7,2) NULL ) -- Amount refunded as cash.\n    - cr_reversed_charge (numeric(7,2) NULL ) -- Amount refunded via reversing a charge.\n    - cr_store_credit (numeric(7,2) NULL ) -- Amount refunded as store credit.\n    - cr_net_loss (numeric(7,2) NULL ) -- Net loss incurred from this catalog return.\n\n目标对象: {\"schema\": \"public\", \"name\": \"monthly_channel_returns_analysis_report\", \"type\": \"TABLE\"}\n\n请分析SQL中的字段级数据血缘关系，并以JSON格式输出结果。JSON应包含：\n1. 'sql_pattern_hash': '8ceac2546d35e6f8a2bccba875a63e42421836e92171e76de9ee33b24f238fb8'\n2. 'source_database_name': 源数据库名称\n3. 'target_object': 写入目标对象信息（如果有）\n4. 'column_level_lineage': 字段级血缘关系列表\n5. 'referenced_objects': SQL中引用的所有数据库对象\n6. 'parsing_confidence': 解析准确度评分\n7. 其他可选字段（如有必要）\n\n请确保输出的是有效的JSON格式，不包含任何解释性文字或Markdown标记。\n"
  }
]