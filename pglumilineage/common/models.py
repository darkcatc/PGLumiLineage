#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
数据模型定义模块

使用Pydantic V2定义应用程序中使用的数据模型，包括原始SQL日志和分析SQL模式。

作者: Vance Chen
"""

from datetime import datetime
from typing import Optional, List, Dict, Any # Dict and Any for JSONB
from pydantic import BaseModel, Field, PositiveInt, NonNegativeInt, constr # constr for TEXT like fields

# Pydantic V2 uses model_config for configuration
from pydantic_settings import SettingsConfigDict


class RawSQLLog(BaseModel):
    """
    原始SQL日志模型
    
    对应数据库中的lumi_logs.captured_logs表
    """
    
    # log_id is auto-generated by DB, usually not set on insert by app,
    # but present when reading. For inserts, we might omit it or allow None.
    log_id: Optional[PositiveInt] = Field(default=None, description="日志ID，主键（由数据库自动生成）")
    captured_at: datetime = Field(default_factory=datetime.now, description="记录被导入到PGLumiLineage系统的时间")
    log_time: datetime = Field(description="源PostgreSQL日志中的实际时间戳，分区键")
    source_database_name: constr(min_length=1) = Field(description="被监控的源数据库名称（如tpcds、erp_prod等）")
    username: Optional[str] = Field(default=None, description="与日志条目关联的用户名")
    database_name_logged: Optional[str] = Field(default=None, description="日志行中报告的数据库名称")
    client_addr: Optional[str] = Field(default=None, description="客户端IP地址和端口（如果有），INET类型映射为str")
    application_name: Optional[str] = Field(default=None, description="客户端报告的应用程序名称")
    session_id: Optional[str] = Field(default=None, description="PostgreSQL后端会话标识符")
    query_id: Optional[int] = Field(default=None, description="内部查询标识符（来自如pg_stat_statements或auto_explain）")
    duration_ms: NonNegativeInt = Field(description="查询执行时间（毫秒）")
    raw_sql_text: constr(min_length=1) = Field(description="原始SQL查询文本")
    normalized_sql_hash: Optional[str] = Field(default=None, description="规范化SQL的哈希值，关联到分析模式表")
    is_processed_for_analysis: bool = Field(default=False, description="该日志条目是否已被输入到SQL规范化和模式聚合过程")
    log_source_identifier: Optional[str] = Field(default=None, description="日志来源标识符，用于收集多个不同PG实例/日志文件时")
    
    # Pydantic V2使用model_config进行配置
    model_config = SettingsConfigDict(from_attributes=True, populate_by_name=True)


class AnalyticalSQLPattern(BaseModel):
    """
    分析SQL模式模型
    
    对应数据库中的lumi_analytics.sql_patterns表
    """
    
    sql_hash: constr(min_length=1) = Field(description="SQL哈希值，主键（SHA256或类似算法）")
    normalized_sql_text: constr(min_length=1) = Field(description="去除字面量并标准化结构后的SQL查询模板")
    sample_raw_sql_text: constr(min_length=1) = Field(description="与该规范化模式匹配的原始SQL查询示例")
    source_database_name: Optional[str] = Field(default=None, description="该模式首次出现或主要观察到的源数据库名称（如tpcds）")
    first_seen_at: datetime = Field(description="首次匹配该模式的日志条目的时间戳")
    last_seen_at: datetime = Field(description="最近匹配该模式的日志条目的时间戳")
    execution_count: PositiveInt = Field(default=1, description="匹配该模式的查询被观察到的总次数")
    total_duration_ms: NonNegativeInt = Field(default=0, description="匹配该模式的所有查询的累计执行时间（毫秒）")
    avg_duration_ms: float = Field(default=0.0, description="匹配该模式的查询的平均执行时间（毫秒）")
    max_duration_ms: NonNegativeInt = Field(default=0, description="匹配该模式的任何查询观察到的最大执行时间（毫秒）")
    min_duration_ms: NonNegativeInt = Field(default=0, description="匹配该模式的任何查询观察到的最小执行时间（毫秒）")
    llm_analysis_status: str = Field(default='PENDING', description="该模式的LLM分析当前状态")
    llm_extracted_relations_json: Optional[Dict[str, Any]] = Field(default=None, description="来自LLM的详细实体和关系的结构化JSON输出")
    last_llm_analysis_at: Optional[datetime] = Field(default=None, description="对该模式进行或尝试LLM分析的最后时间")
    tags: Optional[List[str]] = Field(default=None, description='用于分类的标签数组，如["critical", "daily_etl"]')
    
    # Pydantic V2使用model_config进行配置
    model_config = SettingsConfigDict(from_attributes=True, populate_by_name=True)


# LLM分析状态枚举
class LLMAnalysisStatus:
    """LLM分析状态常量"""
    PENDING = "PENDING"
    PROCESSING = "PROCESSING"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"


from pydantic import SecretStr


class DataSourceConfig(BaseModel):
    """
    数据源配置模型
    
    对应数据库中的 lumi_config.data_sources 表
    """
    source_id: int = Field(description="数据源ID，主键")
    source_name: str = Field(description="数据源名称")
    host: str = Field(description="数据库主机名或IP地址")
    port: int = Field(description="数据库端口")
    username: str = Field(description="数据库用户名")
    password: SecretStr = Field(description="数据库密码，使用 SecretStr 类型保护敏感信息")
    database: str = Field(description="数据库名称")
    
    # Pydantic V2使用model_config进行配置
    model_config = SettingsConfigDict(from_attributes=True, populate_by_name=True)
